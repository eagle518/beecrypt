dnl Process this file with autoconf to produce a configure script
AC_INIT()
AC_CANONICAL_SYSTEM


dnl Check system type
case $target_os in
  cygwin*)
    AC_DEFINE(CYGWIN)
	AC_DEFINE(LEADING_UNDERSCORE)
    ;;
  darwin*)
    AC_DEFINE(DARWIN)
	AC_DEFINE(LEADING_UNDERSCORE)
    ;;
  freebsd*)
    AC_DEFINE(FREEBSD)
	AC_DEFINE(NO_UNDERSCORES)
    ;;
  linux*)
    AC_DEFINE(LINUX)
	AC_DEFINE(NO_UNDERSCORES)
    ;;
  openbsd*)
    AC_DEFINE(OPENBSD)
	AC_DEFINE(NO_UNDERSCORES)
    ;;
  osf*)
    AC_DEFINE(OSF)
    AC_DEFINE(NO_UNDERSCORES)
    ;;
  *qnx)
    AC_DEFINE(QNX)
    AC_DEFINE(NO_UNDERSCORES)
    ;;
  solaris*)
    AC_DEFINE(SOLARIS)
	AC_DEFINE(NO_UNDERSCORES)
    ;;
  sysv*uv*)
    AC_DEFINE(SCO_UNIX)
    AC_DEFINE(NO_UNDERSCORES)
    ;;
  *)
    AC_MSG_WARN([Operating system type $target_os currently not supported and/or tested])
    ;;
esac

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_LN_S
AC_PROG_INSTALL

AC_C_INLINE

if test "$ac_cv_prog_gcc" != yes; then
  AC_MSG_CHECKING([whether we are using Sun Workshop C])
  AC_EGREP_CPP(yes,
[ #ifdef __SUNPRO_C
  yes;
#endif
], ac_cv_prog_SUNPRO_CC=yes, ac_cv_prog_SUNPRO_CC=no)
  AC_MSG_RESULT($ac_cv_prog_SUNPRO_CC)
  if test "$ac_cv_prog_SUNPRO_CC" != yes; then
    AC_MSG_CHECKING([whether we are using Compaq's C compiler])
    AC_EGREP_CPP(yes,
[ #ifdef __DECC
  yes;
#endif
], ac_cv_prog_DECC=yes, ac_cv_prog_DECC=no)
    AC_MSG_RESULT($ac_cv_prog_DECC)
  fi
fi

AC_ARG_ENABLE(debug, [  --enable-debug	creates debugging code [default=no]],
  [ if test "$enableval" = no; then
      ac_enable_debug=no
    else
      ac_enable_debug=yes
    fi
  ], [ ac_enable_debug=no])

dnl Check if we need to disable optimizations
AC_ARG_ENABLE(optimized, [  --enable-optimized    enables the assembler optimizations [default=yes]],
  [ if test "$enableval" = no; then
      ac_enable_optimized=no
    else
      ac_enable_optimized=yes
   fi
  ], [ ac_enable_optimized=yes ])

dnl Check if we have the necessary java components installed
AC_ARG_WITH(javaglue, [  --with-javaglue	creates the java glue code [default=yes]],
  [ if test "$withval" = no; then
      ac_with_javaglue=no
    else
      ac_with_javaglue=yes
    fi
  ], [ ac_with_javaglue=yes ])

if test "$ac_with_javaglue" = yes ; then
  AC_CHECK_PROG(ac_cv_have_java, java, yes, no)
  AC_CHECK_PROG(ac_cv_have_javac, javac, yes, no)
  if test "$ac_cv_have_java" = yes; then
    if test "$ac_cv_have_javac" = yes; then
      AC_MSG_CHECKING([for Java JNI headers])
      cat > conftest.java << EOF
public class conftest
{
  public static void main(String[[]] argv)
  {
     System.out.println(System.getProperty("java.home"));
  }
}
EOF
      ac_cv_java_home=`javac conftest.java; java conftest`
      ac_cv_java_include="$ac_cv_java_home"/include
      if test -d "$ac_java_cv_include" ; then
        AC_MSG_RESULT($ac_cv_java_headers)
        ac_cv_java_headers=yes
      else
        ac_cv_java_include="$ac_cv_java_home"/../include
        if test -d "$ac_cv_java_include" ; then
          AC_MSG_RESULT($ac_cv_java_headers)
          ac_cv_java_headers=yes
        else
          AC_MSG_WARN([java headers not found, disabling javaglue])
          ac_cv_java_headers=no
          ac_with_javaglue=no
        fi
      fi
    else
      AC_MSG_WARN([javac not found, disabling javaglue])
      ac_cv_java_headers=no
      ac_with_javaglue=no
    fi
  else
    AC_MSG_WARN([java not found, disabling javaglue])
    ac_cv_java_headers=no
    ac_with_javaglue=no
  fi
fi

if test "$ac_with_javaglue" = yes ; then
  AC_DEFINE(JAVAGLUE,1)
  JAVAGLUE="javaglue.o"
  JNIFLAGS="-I$ac_cv_java_include"
  case $target_os in
  linux*)
    JNIFLAGS="$JNIFLAGS -I$ac_cv_java_include"/linux
    ;;
  solaris*)
    JNIFLAGS="$JNIFLAGS -I$ac_cv_java_include"/solaris
    ;;
  *)
    AC_MSG_WARN([please add approriate -I$ac_cv_java_include/<operating system> directory to JNIFLAGS])
    ;;
  esac
else
  AC_DEFINE(JAVAGLUE,0)
  JAVAGLUE=""
  JNIFLAGS=""
fi

dnl Product and version
MAJOR=2
MINOR=0
VERSION=$MAJOR.$MINOR.0
PRODUCT=beecrypt
SHARED_LIBRARY=lib$PRODUCT.so
SHARED_LIBRARY_NAME=$SHARED_LIBRARY.$VERSION
AC_DEFINE_UNQUOTED(PRODUCT, "$PRODUCT")
AC_DEFINE_UNQUOTED(VERSION, "$VERSION")
AC_DEFINE_UNQUOTED(MAJOR, "$MAJOR")
AC_DEFINE_UNQUOTED(MINOR, "$MINOR")
AC_DEFINE(JNIFLAGS, $JNIFLAGS)
AC_SUBST(PRODUCT)
AC_SUBST(VERSION)
AC_SUBST(MAJOR)
AC_SUBST(MINOR)
AC_SUBST(CC)
AC_SUBST(CPP)
AC_SUBST(LD)
AC_SUBST(CONFASFLAGS)
AC_SUBST(CONFCPPFLAGS)
AC_SUBST(CONFCFLAGS)
AC_SUBST(CONFCLIBFLAGS)
AC_SUBST(CONFLDFLAGS)
AC_SUBST(CONFLDLIBFLAGS)
AC_SUBST(JAVAGLUE)
AC_SUBST(JNIFLAGS)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_FUNC_MEMCMP

dnl Checks for header files.
AC_STDC_HEADERS

AC_CHECK_HEADERS(errno.h string.h ctype.h stdlib.h)
AC_CHECK_HEADERS(unistd.h fcntl.h limits.h)
AC_CHECK_HEADERS(time.h)
AC_CHECK_HEADERS(sys/types.h sys/stat.h sys/time.h)
AC_CHECK_HEADERS(thread.h pthread.h synch.h semaphore.h)
AC_CHECK_HEADERS(termio.h termios.h)
AC_CHECK_HEADERS(sys/audioio.h sys/ioctl.h sys/soundcard.h)

if test "$ac_cv_header_sys_time_h" = yes; then
  AC_CHECK_FUNC(gettimeofday, [
    AC_DEFINE(HAVE_GETTIMEOFDAY, 1)
    ])
  AC_CHECK_FUNC(gethrtime, [
    AC_DEFINE(HAVE_GETHRTIME, 1)
    ])
fi

if test "$ac_cv_header_thread_h" = yes; then
  AC_HAVE_LIBRARY(thread)
elif test  "$ac_cv_header_pthread_h" = yes; then
  AC_HAVE_LIBRARY(pthread)
fi

dnl Checks for compiler flags
CONFCPPFLAGS=""
CONFCFLAGS=""
CONFCLIBFLAGS=""
CONFLDFLAGS=""
CONFLDLIBFLAGS=""

if test "$ac_enable_optimized" = yes; then
  case $target_cpu in
  alpha*)
    CONFCPPFLAGS="$CONFCPPFLAGS -DOPTIMIZE_ALPHA"
    ;;
  i386)
    CONFCPPFLAGS="$CONFCPPFLAGS -DOPTIMIZE_I386"
    ;;
  i486)
    CONFCPPFLAGS="$CONFCPPFLAGS -DOPTIMIZE_I486"
    ;;
  i586)
    CONFCPPFLAGS="$CONFCPPFLAGS -DOPTIMIZE_I586"
    ;;
  i686)
    CONFCPPFLAGS="$CONFCPPFLAGS -DOPTIMIZE_I686"
    ;;
  ia64)
    CONFCPPFLAGS="$CONFCPPFLAGS -DOPTIMIZE_IA64"
    ;;
  powerpc)
    CONFCPPFLAGS="$CONFCPPFLAGS -DOPTIMIZE_POWERPC"
    ;;
  sparcv8plus*)
    CONFCPPFLAGS="$CONFCPPFLAGS -DOPTIMIZE_SPARCV8PLUS"
    ;;
  sparcv9*)
    CONFCPPFLAGS="$CONFCPPFLAGS -DOPTIMIZE_SPARCV9"
    ;;
  x86)
  # QNX Neutrino doesn't list the exact cpu type
    ;;
  esac
fi

if test "$ac_cv_prog_gcc" = yes; then
  CONFCLIBFLAGS="$CONFCFLAGS -shared"
  CONFLDLIBFLAGS="$CONFLDFLAGS -shared -dy -soname $SHARED_LIBRARY_NAME"
elif test "$ac_cv_prog_SUNPRO_CC" = yes; then
  CONFCFLAGS="$CONFCFLAGS -mt"
  CONFCLIBFLAGS="$CONFCLIBFLAGS -KPIC"
  CONFLDLIBFLAGS="$CONFLDLIBFLAGS -G -h $SHARED_LIBRARY_NAME"
else
  CONFCLIBFLAGS="$CONFCLIBFLAGS -shared"
  CONFLDLIBFLAGS="$CONFLDLIBFLAGS -shared"
fi

if test "$ac_enable_debug" = yes; then
  CONFCFLAGS="$CONFCFLAGS -g"
  if test "$ac_cv_prog_gcc" = yes; then
    CONFCFLAGS="$CONFCFLAGS -Wall"
  fi
else
  if test "$ac_cv_prog_gcc" = yes; then
    CONFCFLAGS="$CONFCFLAGS -O3"
    if test "$ac_enable_optimized" = yes; then
      case $target_cpu in
# This switch makes the mp32 routines slower by about 10%, so it's disabled
#     alphaev6)
#       CONFCFLAGS="$CONFCFLAGS -mcpu=ev6"
#       ;;
      i486)
        CONFCFLAGS="$CONFCFLAGS -m486"
        ;;
      i586)
        CONFCFLAGS="$CONFCFLAGS -mpentium"
        ;;
      i686)
        CONFCFLAGS="$CONFCFLAGS -mpentiumpro"
        ;;
# This switch makes some code more than 10% slower, for a 2% speedup in mp32 routines, so it's disabled
#     sparcv8plus*)
#       CONFCFLAGS="$CONFCFLAGS -mcpu=ultrasparc"
#       ;;
#     sparcv9*)
#       CONFCFLAGS="$CONFCFLAGS -mcpu=ultrasparc"
#       ;;
      esac
    fi
  elif test "$ac_cv_prog_SUNPRO_CC" = yes; then
    CONFCFLAGS="$CONFCFLAGS -fast"
    if test "$ac_enable_optimized" = yes; then
      case $target_cpu in
      sparcv8plus)
        CONFCFLAGS="$CONFCFLAGS -xtarget=generic -xarch=v8plus"
        ;;
      sparcv8plusa)
        CONFCFLAGS="$CONFCFLAGS -xtarget=generic -xarch=v8plusa"
        ;;
      sparcv8plusb)
        CONFCFLAGS="$CONFCFLAGS -xtarget=generic -xarch=v8plusb"
        ;;
      sparcv9)
        CFLAGS="-xarch=v9"
        CONFCFLAGS="$CONFCFLAGS -xtarget=generic64 -xarch=v9"
        CONFLDFLAGS="$CONFLDFLAGS -64"
        ;;
      sparcv9a)
        CFLAGS="-xarch=v9"
        CONFCFLAGS="$CONFCFLAGS -xtarget=generic64 -xarch=v9a"
        CONFLDFLAGS="$CONFLDFLAGS -64"
        ;;
      sparcv9b)
        CFLAGS="-xarch=v9"
        CONFCFLAGS="$CONFCFLAGS -xtarget=generic64 -xarch=v9b"
        CONFLDFLAGS="$CONFLDFLAGS -64"
        ;;
      esac
    fi
  else
    CONFCFLAGS="$CONFCFLAGS -O2"
  fi
fi

case $target_os in
  freebsd*)
	LD=$CC
    CONFCFLAGS="$CONFCFLAGS -pthread"
    CONFLDFLAGS="$CONFLDFLAGS -pthread"
    ;;
  osf*)
	LD=$CC
    CONFLDLIBFLAGS="$CONFLDLIBFLAGS -msym -soname $SHARED_LIBRARY_NAME"
    ;;
  solaris*)
    if test "$ac_cv_prog_SUNPRO_CC" = yes; then
      LD=/usr/ccs/bin/ld
    else
      LD=ld
    fi
    ;;
  *)
    LD=ld
    ;;
esac

dnl Checks for assembler flags
CONFASFLAGS=""
if test "$ac_enable_optimized" = yes; then
  case $target_cpu in
  sparcv8plus)
    CONFASFLAGS="-Av8plus"
    ;;
  sparcv9)
    CONFASFLAGS="-Av9 -64"
    ;;
  esac
fi

dnl Checks for word sizes
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(unsigned char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(unsigned short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(unsigned int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(unsigned long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(unsigned long long)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)

dnl Checks for endianness
AC_C_BIGENDIAN

dnl Checks for devices
AC_CHECKING(for specific entropy devices)
case $target_os in
  solaris*)
    AC_MSG_CHECKING([for /dev/audio])
    if test -r /dev/audio; then
      AC_DEFINE(HAVE_DEV_AUDIO,1)
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
    fi
    ;;
  linux*)
    AC_MSG_CHECKING([for /dev/dsp])
    if test -r /dev/dsp; then
      AC_DEFINE(HAVE_DEV_DSP,1)
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
    fi
    ;;
  *)
    AC_MSG_WARN(no specific entropy devices present)
    ;;
esac
AC_CHECKING(for generic entropy devices)
AC_MSG_CHECKING([for /dev/random])
if test -r /dev/random; then
  AC_DEFINE(HAVE_DEV_RANDOM,1)
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi
AC_MSG_CHECKING([for /dev/urandom])
if test -r /dev/urandom; then
  AC_DEFINE(HAVE_DEV_URANDOM,1)
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi
AC_MSG_CHECKING([for /dev/tty])
if test -r /dev/tty; then
  AC_DEFINE(HAVE_DEV_TTY,1)
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl Generate the assembler optimizations
BLOWFISHOPTDEP="blowfishopt.o: blowfishopt.c"
BLOWFISHOPTRULE="	\$(COMPILE.c) \$(CLIBFLAGS)"
FIPS180OPTDEP="fips180opt.o: fips180opt.c"
FIPS180OPTRULE="	\$(COMPILE.c) \$(CLIBFLAGS)"
MP32OPTDEP="mp32opt.o: mp32opt.c"
MP32OPTRULE="	\$(COMPILE.c) \$(CLIBFLAGS)"
if test "$ac_enable_optimized" = yes; then
  case $target_cpu in
    i386)
      MP32OPTDEP="mp32opt.o: gnu/mp32opt.gas.i386.S"
      MP32OPTRULE="	\$(CPP) \$(CPPFLAGS) gnu/mp32opt.gas.i386.S | \$(AS) \$(ASFLAGS) -o mp32opt.o"
      ;;
    i[[56]]86)
      BLOWFISHOPTDEP="blowfishopt.o: gnu/blowfishopt.gas.i586.S"
      BLOWFISHOPTRULE="	\$(CPP) \$(CPPFLAGS) gnu/blowfishopt.gas.i586.S | \$(AS) \$(ASFLAGS) -o blowfishopt.o"
      FIPS180OPTDEP="fips180opt.o: gnu/fips180opt.gas.i586.S"
      FIPS180OPTRULE="	\$(CPP) \$(CPPFLAGS) gnu/fips180opt.gas.i586.S | \$(AS) \$(ASFLAGS) -o fips180opt.o"
      MP32OPTDEP="mp32opt.o: gnu/mp32opt.gas.i386.S"
      MP32OPTRULE="	\$(CPP) \$(CPPFLAGS) gnu/mp32opt.gas.i386.S | \$(AS) \$(ASFLAGS) -o mp32opt.o"
      ;;
    ia64)
      MP32OPTDEP="mp32opt.o: gnu/mp32opt.gas.ia64.S"
      MP32OPTRULE="	\$(CPP) \$(CPPFLAGS) gnu/mp32opt.gas.ia64.S | \$(AS) \$(ASFLAGS) -o mp32opt.o"
      ;;
    powerpc)
      MP32OPTDEP="mp32opt.o: gnu/mp32opt.gas.powerpc.S"
      MP32OPTRULE="	\$(CPP) \$(CPPFLAGS) gnu/mp32opt.gas.powerpc.S | \$(AS) \$(ASFLAGS) -o mp32opt.o"
      ;;
    sparcv8plus) 
      MP32OPTDEP="mp32opt.o: gnu/mp32opt.gas.sparcv9.S"
      MP32OPTRULE="	\$(CPP) \$(CPPFLAGS) gnu/mp32opt.gas.sparcv9.S | \$(AS) \$(ASFLAGS) -o mp32opt.o"
      ;;
  esac
fi

AC_SUBST(BLOWFISHOPTDEP)
AC_SUBST(BLOWFISHOPTRULE)
AC_SUBST(FIPS180OPTDEP)
AC_SUBST(FIPS180OPTRULE)
AC_SUBST(MP32OPTDEP)
AC_SUBST(MP32OPTRULE)

dnl Generate the config header
AC_CONFIG_HEADER(gnu/config.gnu.h)

dnl Output
AC_OUTPUT(Makefile)
