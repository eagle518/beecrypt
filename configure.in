dnl Process this file with autoconf to produce a configure script.
AC_INIT()
AC_CANONICAL_SYSTEM

dnl Check system type
case $target_os in
  solaris*)
    AC_DEFINE(SOLARIS)
    ;;
  linux*)
    AC_DEFINE(LINUX)
    ;;
  *)
    AC_MSG_ERROR([
Operating system type $host currently not supported/tested
])
  ;;
esac

dnl Generate the config header
AC_CONFIG_HEADER(gnu/config.gnu.h)

AC_ARG_ENABLE(debug, [  --enable-debug    creates debugging code [default=no]],
  [ if test "$enableval" = no; then
      ac_use_debug_code=no
    else
      ac_use_debug_code=yes
    fi
  ], [ ac_use_debug_code=no])

dnl Product and version
PRODUCT=beecrypt
VERSION=1.0.0
AC_DEFINE_UNQUOTED(PRODUCT, "$PRODUCT")
AC_DEFINE_UNQUOTED(VERSION, "$VERSION")
AC_SUBST(PRODUCT)
AC_SUBST(VERSION)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL

AC_C_INLINE

if test "$ac_cv_prog_gcc" != yes; then
  AC_MSG_CHECKING(whether we are using Sun Workshop C)
  cat > conftest.c << EOF
#ifdef __SUNPRO_C
  yes;
#endif
EOF
  ac_try="$CC -E conftest.c"
  if { (eval echo configure:__online__: \"$ac_try\") 1>&5; (eval $ac_try) 2>&5; } | egrep yes > /dev/null 2>&1; then
    ac_cv_prog_SUNPRO_CC=yes
    # test version of sunpro cc here
  else
    ac_cv_prog_SUNPRO_CC=no
  fi
  AC_MSG_RESULT($ac_cv_prog_SUNPRO_CC)
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_FUNC_MEMCMP

dnl Checks for header files.
AC_HEADER_STDC

AC_CHECK_HEADERS(errno.h string.h ctype.h stdlib.h)
AC_CHECK_HEADERS(unistd.h fcntl.h limits.h)
AC_CHECK_HEADERS(time.h)
AC_CHECK_HEADERS(sys/types.h sys/stat.h sys/time.h)
AC_CHECK_HEADERS(thread.h pthread.h synch.h semaphore.h)
AC_CHECK_HEADERS(termio.h)
AC_CHECK_HEADERS(sys/audioio.h sys/ioctl.h sys/soundcard.h)

if test "$ac_cv_header_sys_time_h" = yes; then
  AC_CHECK_FUNC(gettimeofday, [
    AC_DEFINE(HAVE_GETTIMEOFDAY, 1)
    ])
  AC_CHECK_FUNC(gethrtime, [
    AC_DEFINE(HAVE_GETHRTIME, 1)
    ])
fi

if test "$ac_cv_header_thread_h" = yes; then
  AC_HAVE_LIBRARY(thread)
elif test  "$ac_cv_header_pthread_h" = yes; then
  AC_HAVE_LIBRARY(pthread)
fi

dnl Checks for word sizes
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(unsigned char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(unsigned short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(unsigned int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(unsigned long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(unsigned long long)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)

dnl Checks for endianness
AC_C_BIGENDIAN

dnl Checks for compiler flags
if test "$ac_use_debug_code" = yes; then
  if test "$ac_cv_prog_gcc" = yes; then
    CFLAGS="-g -shared"
  elif test "$ac_cv_prog_SUNPRO_CC" = yes; then
    CFLAGS="-g -mt -KPIC"
  else
    CFLAGS="-g -shared"
  fi
else
  if test "$ac_cv_prog_gcc" = yes; then
    CFLAGS="-O3 -shared"
    case $target_cpu in
    i386)
      ;;
    i486)
      CFLAGS="$CFLAGS -m486 -Di486" ;;
    i586)
      CFLAGS="$CFLAGS -mpentium -Di586" ;;
    i686)
      CFLAGS="$CFLAGS -mpentiumpro -Di686" ;;
    *)
      echo "Don't know how to optimize for" $target_cpu ;;
    esac
  elif test "$ac_cv_prog_SUNPRO_CC" = yes; then
    CFLAGS="-fast -mt -KPIC"
    case $target_cpu in
    sparcv8plus)
      CFLAGS="$CFLAGS -Dsparcv8plus -xchip=ultra -xarch=v8plus" ;;
    sparcv9)
      CFLAGS="$CFLAGS -Dsparcv9 -xchip=ultra -xarch=v9" ;;
    *)
      echo "Using general optimization for" $target_cpu ;;
    esac
  else
    CFLAGS="-O2 -shared"
  fi
fi

dnl Checks for devices
AC_MSG_CHECKING(for entropy device)
case $host in
  *-*-solaris*)
    AC_DEFINE(HAVE_DEV_AUDIO,1)
    AC_DEFINE(HAVE_DEV_TTY,1)
    ac_cv_entropy_device="/dev/audio,/dev/tty"
    ;;
  *-*-linux*)
    AC_DEFINE(HAVE_DEV_DSP,1)
    AC_DEFINE(HAVE_DEV_RANDOM,1)
    AC_DEFINE(HAVE_DEV_TTY,1)
    ac_cv_entropy_device="/dev/dsp,/dev/random,/dev/tty"
    ;;
  *)
    AC_MSG_ERROR([
There is no entropy device to initialize the random generator on host $host
])
  ;;
esac
AC_MSG_RESULT($ac_cv_entropy_device)

dnl Output
AC_OUTPUT(Makefile)
