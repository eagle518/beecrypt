dnl Process this file with autoconf to produce a configure script
AC_INIT()
AC_CANONICAL_SYSTEM

dnl Check system type
case $target_os in
  cygwin*)
    AC_DEFINE(CYGWIN)
	AC_DEFINE(LEADING_UNDERSCORE)
    ;;
  darwin*)
    AC_DEFINE(DARWIN)
	AC_DEFINE(LEADING_UNDERSCORE)
    ;;
  freebsd*)
    AC_DEFINE(FREEBSD)
	AC_DEFINE(NO_UNDERSCORES)
    ;;
  linux*)
    AC_DEFINE(LINUX)
	AC_DEFINE(NO_UNDERSCORES)
    ;;
  openbsd*)
    AC_DEFINE(OPENBSD)
	AC_DEFINE(NO_UNDERSCORES)
    ;;
  osf*)
    AC_DEFINE(OSF)
    AC_DEFINE(NO_UNDERSCORES)
    ;;
  *qnx)
    AC_DEFINE(QNX)
    AC_DEFINE(NO_UNDERSCORES)
    ;;
  solaris*)
    AC_DEFINE(SOLARIS)
	AC_DEFINE(NO_UNDERSCORES)
    ;;
  *)
    AC_MSG_WARN([Operating system type $target_os currently not supported and/or tested])
    ;;
esac

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL

AC_C_INLINE

if test "$ac_cv_prog_gcc" != yes; then
  AC_MSG_CHECKING([whether we are using Sun Workshop C])
  AC_EGREP_CPP(yes,
[ #ifdef __SUNPRO_C
  yes;
#endif
], ac_cv_prog_SUNPRO_CC=yes, ac_cv_prog_SUNPRO_CC=no)
  AC_MSG_RESULT($ac_cv_prog_SUNPRO_CC)
fi

dnl Check if we have the necessary java components installed
AC_ARG_ENABLE(javaglue, [  --enable-javaglue	creates the java glue code [default=yes]],
  [ if test "$enableval" = no; then
      ac_enable_javaglue=no
    else
      ac_enable_javaglue=yes
    fi
  ], [ ac_enable_javaglue=yes ])

if test "$ac_enable_javaglue" = yes ; then
  AC_CHECK_PROG(ac_cv_have_java, java, yes, no)
  AC_CHECK_PROG(ac_cv_have_javac, javac, yes, no)
  if test "$ac_cv_have_java" = yes; then
    if test "$ac_cv_have_javac" = yes; then
      AC_MSG_CHECKING([for Java JNI headers])
      cat > conftest.java << EOF
public class conftest
{
  public static void main(String[[]] argv)
  {
     System.out.println(System.getProperty("java.home"));
  }
}
EOF
      ac_cv_java_home=`javac conftest.java; java conftest`
      ac_cv_java_include="$ac_cv_java_home"/include
      if test -d "$ac_java_cv_include" ; then
        AC_MSG_RESULT($ac_cv_java_headers)
        ac_cv_java_headers=yes
      else
        ac_cv_java_include="$ac_cv_java_home"/../include
        if test -d "$ac_cv_java_include" ; then
          AC_MSG_RESULT($ac_cv_java_headers)
          ac_cv_java_headers=yes
        else
          AC_MSG_WARN([java headers not found, disabling javaglue])
          ac_cv_java_headers=no
          ac_enable_javaglue=no
        fi
      fi
    else
      AC_MSG_WARN([javac not found, disabling javaglue])
      ac_cv_java_headers=no
      ac_enable_javaglue=no
    fi
  else
    AC_MSG_WARN([java not found, disabling javaglue])
    ac_cv_java_headers=no
    ac_enable_javaglue=no
  fi
fi

if test "$ac_enable_javaglue" = yes ; then
  AC_DEFINE(JAVAGLUE,1)
  JAVAGLUE="javaglue.o"
  JNIFLAGS="-I$ac_cv_java_include"
  case $target_os in
  linux*)
    JNIFLAGS="$JNIFLAGS -I$ac_cv_java_include"/linux
    ;;
  solaris*)
    JNIFLAGS="$JNIFLAGS -I$ac_cv_java_include"/solaris
    ;;
  *)
    AC_MSG_WARN([please add approriate -I$ac_cv_java_include/<operating system> directory to JNIFLAGS])
    ;;
  esac
else
  AC_DEFINE(JAVAGLUE,0)
  JAVAGLUE=""
  JNIFLAGS=""
fi

AC_ARG_ENABLE(debug, [  --enable-debug	creates debugging code [default=no]],
  [ if test "$enableval" = no; then
      ac_enable_debug=no
    else
      ac_enable_debug=yes
    fi
  ], [ ac_enable_debug=no])

dnl Product and version
MAJOR=1
VERSION=$MAJOR.1.1
PRODUCT=beecrypt
SHARED_LIBRARY=lib$PRODUCT.so
SHARED_LIBRARY_NAME=$SHARED_LIBRARY.$MAJOR
AC_DEFINE_UNQUOTED(PRODUCT, "$PRODUCT")
AC_DEFINE_UNQUOTED(VERSION, "$VERSION")
AC_DEFINE_UNQUOTED(MAJOR, "$MAJOR")
AC_DEFINE(JNIFLAGS, $JNIFLAGS)
AC_SUBST(PRODUCT)
AC_SUBST(VERSION)
AC_SUBST(MAJOR)
AC_SUBST(CC)
AC_SUBST(CPP)
AC_SUBST(LD)
AC_SUBST(CONFASFLAGS)
AC_SUBST(CONFCFLAGS)
AC_SUBST(CONFCPPFLAGS)
AC_SUBST(CONFLDFLAGS)
AC_SUBST(JAVAGLUE)
AC_SUBST(JNIFLAGS)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_FUNC_MEMCMP

dnl Checks for header files.
AC_HEADER_STDC

AC_CHECK_HEADERS(errno.h string.h ctype.h stdlib.h alloca.h)
AC_CHECK_HEADERS(unistd.h fcntl.h limits.h)
AC_CHECK_HEADERS(time.h)
AC_CHECK_HEADERS(sys/types.h sys/stat.h sys/time.h)
AC_CHECK_HEADERS(thread.h pthread.h synch.h semaphore.h)
AC_CHECK_HEADERS(termio.h termios.h)
AC_CHECK_HEADERS(sys/audioio.h sys/ioctl.h sys/soundcard.h)

if test "$ac_cv_header_alloca_h" = yes; then
  AC_DEFINE(HAVE_ALLOCA, 1)
fi

if test "$ac_cv_header_sys_time_h" = yes; then
  AC_CHECK_FUNC(gettimeofday, [
    AC_DEFINE(HAVE_GETTIMEOFDAY, 1)
    ])
  AC_CHECK_FUNC(gethrtime, [
    AC_DEFINE(HAVE_GETHRTIME, 1)
    ])
fi

if test "$ac_cv_header_thread_h" = yes; then
  AC_HAVE_LIBRARY(thread)
elif test  "$ac_cv_header_pthread_h" = yes; then
  AC_HAVE_LIBRARY(pthread)
fi

dnl Checks for word sizes
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(unsigned char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(unsigned short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(unsigned int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(unsigned long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(unsigned long long)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)

dnl Checks for endianness
AC_C_BIGENDIAN

dnl Checks for compiler flags
CONFCFLAGS=""
CONFCPPFLAGS=""
CONFLDFLAGS=""

case $target_cpu in
alpha*)
  CONFCPPFLAGS="$CONFCPPFLAGS -Dalpha"
  ;;
i386)
  CONFCPPFLAGS="$CONFCPPFLAGS -Di386"
  ;;
i486)
  CONFCPPFLAGS="$CONFCPPFLAGS -Di486"
  ;;
i586)
  CONFCPPFLAGS="$CONFCPPFLAGS -Di586"
  ;;
i686)
  CONFCPPFLAGS="$CONFCPPFLAGS -Di686"
  ;;
ia64)
  CONFCPPFLAGS="$CONFCPPFLAGS -Dia64"
  ;;
powerpc)
  CONFCPPFLAGS="$CONFCPPFLAGS -Dpowerpc"
  ;;
sparcv8plus)
  CONFCPPFLAGS="$CONFCPPFLAGS -Dsparcv8plus"
  ;;
sparcv9)
  CONFCPPFLAGS="$CONFCPPFLAGS -Dsparcv9"
  ;;
x86)
# QNX Neutrino doesn't list the exact cpu type
  ;;
esac

if test "$ac_cv_prog_gcc" = yes; then
  CONFCFLAGS="$CONFCFLAGS -shared"
  CONFLDFLAGS="$CONFLDFLAGS -shared -dy -soname $SHARED_LIBRARY_NAME"
elif test "$ac_cv_prog_SUNPRO_CC" = yes; then
  CONFCFLAGS="$CONFCFLAGS -mt -KPIC"
  CONFLDFLAGS="$CONFLDFLAGS -G -h $SHARED_LIBRARY_NAME"
else
  CONFCFLAGS="$CONFCFLAGS -shared"
  CONFLDFLAGS="$CONFLDFLAGS -shared"
fi

if test "$ac_enable_debug" = yes; then
  CONFCFLAGS="$CONFCFLAGS -g"
  if test "$ac_cv_prog_gcc" = yes; then
    CONFCFLAGS="$CONFCFLAGS -Wall"
  fi
else
  if test "$ac_cv_prog_gcc" = yes; then
    CONFCFLAGS="$CONFCFLAGS -O3"
    case $target_cpu in
# This optimization makes the mp32 routines slower by about 10%, so they're disabled
#   alphaev6)
#     CONFCFLAGS="$CONFCFLAGS -mcpu=ev6"
#     ;;
    i486)
      CONFCFLAGS="$CONFCFLAGS -m486"
      ;;
    i586)
      CONFCFLAGS="$CONFCFLAGS -mpentium"
      ;;
    i686)
      CONFCFLAGS="$CONFCFLAGS -mpentiumpro"
      ;;
    sparcv8plus)
      CONFCFLAGS="$CONFCFLAGS -mcpu=ultrasparc"
      ;;
    sparcv9)
      CONFCFLAGS="$CONFCFLAGS -mcpu=ultrasparc"
      ;;
    esac
  elif test "$ac_cv_prog_SUNPRO_CC" = yes; then
    CONFCFLAGS="$CONFCFLAGS -fast"
    case $target_cpu in
    sparcv8plus)
      CONFCFLAGS="$CONFCFLAGS -xchip=ultra -xarch=v8plus"
      ;;
    sparcv9)
      CONFCFLAGS="$CONFCFLAGS -xchip=ultra -xarch=v9"
      CONFCPPFLAGS="$CONFCPPFLAGS -Dsparcv9"
      ;;
    esac
  else
    CONFCFLAGS="$CONFCFLAGS -O2"
  fi
fi

case $target_os in
  freebsd*)
	LD=$CC
    CONFCFLAGS="$CONFCFLAGS -pthread"
    CONFLDFLAGS="$CONFLDFLAGS -pthread"
    ;;
  osf*)
	LD=$CC
    CONFLDFLAGS="$CONFLDFLAGS -msym -soname $SHARED_LIBRARY_NAME"
    ;;
  *)
    LD=ld
    ;;
esac

dnl Checks for assembler flags
CONFASFLAGS=""
case $target_cpu in
sparcv8plus)
  CONFASFLAGS="-Av8plus"
  ;;
sparcv9)
  CONFASFLAGS="-Av9"
  ;;
esac

dnl Checks for devices
AC_MSG_CHECKING(for entropy device)
case $target_os in
  cygwin*)
    ;;
  darwin*)
    AC_DEFINE(HAVE_DEV_TTY,1)
    ac_cv_entropy_device="tty"
    ;;
  freebsd*)
    AC_DEFINE(HAVE_DEV_RANDOM,1)
    AC_DEFINE(HAVE_DEV_URANDOM,1)
    AC_DEFINE(HAVE_DEV_TTY,1)
    ac_cv_entropy_device="random,urandom,tty"
    ;;
  linux*)
    AC_DEFINE(HAVE_DEV_DSP,1)
    AC_DEFINE(HAVE_DEV_RANDOM,1)
    AC_DEFINE(HAVE_DEV_URANDOM,1)
    AC_DEFINE(HAVE_DEV_TTY,1)
    ac_cv_entropy_device="dsp,random,urandom,tty"
    ;;
  osf*)
    AC_DEFINE(HAVE_DEV_TTY,1)
    ac_cv_entropy_device="tty"
    ;;
  *qnx)
    AC_DEFINE(HAVE_DEV_TTY,1)
    ac_cv_entropy_device="tty"
    ;;
  solaris*)
    AC_DEFINE(HAVE_DEV_AUDIO,1)
    AC_DEFINE(HAVE_DEV_TTY,1)
    ac_cv_entropy_device="audio,tty"
    ;;
  *)
    AC_MSG_ERROR([
There is no entropy device to initialize the random generator on host $host
])
  ;;
esac
AC_MSG_RESULT($ac_cv_entropy_device)

dnl Generate the assembler optimizations
BLOWFISHOPTDEP=""
BLOWFISHOPTRULE=""
FIPS180OPTDEP=""
FIPS180OPTRULE=""
MP32OPTDEP=""
MP32OPTRULE=""
case $target_cpu in
  i386)
    MP32OPTDEP="mp32opt.o: gnu/mp32opt.gas.i386.S"
    MP32OPTRULE="	\$(CPP) \$(CPPFLAGS) gnu/mp32opt.gas.i386.S | \$(AS) \$(ASFLAGS) -o mp32opt.o"
    ;;
  i[[56]]86)
    BLOWFISHOPTDEP="blowfishopt.o: gnu/blowfishopt.gas.i586.S"
    BLOWFISHOPTRULE="	\$(CPP) \$(CPPFLAGS) gnu/blowfishopt.gas.i586.S | \$(AS) \$(ASFLAGS) -o blowfishopt.o"
    FIPS180OPTDEP="fips180opt.o: gnu/fips180opt.gas.i586.S"
    FIPS180OPTRULE="	\$(CPP) \$(CPPFLAGS) gnu/fips180opt.gas.i586.S | \$(AS) \$(ASFLAGS) -o fips180opt.o"
    MP32OPTDEP="mp32opt.o: gnu/mp32opt.gas.i386.S"
    MP32OPTRULE="	\$(CPP) \$(CPPFLAGS) gnu/mp32opt.gas.i386.S | \$(AS) \$(ASFLAGS) -o mp32opt.o"
    ;;
  ia64)
    MP32OPTDEP="mp32opt.o: gnu/mp32opt.gas.ia64.S"
    MP32OPTRULE="	\$(CPP) \$(CPPFLAGS) gnu/mp32opt.gas.ia64.S | \$(AS) \$(ASFLAGS) -o mp32opt.o"
    ;;
  powerpc)
    MP32OPTDEP="mp32opt.o: gnu/mp32opt.gas.powerpc.S"
    MP32OPTRULE="	\$(CPP) \$(CPPFLAGS) gnu/mp32opt.gas.powerpc.S | \$(AS) \$(ASFLAGS) -o mp32opt.o"
    ;;
  sparcv8plus | sparcv9)
    MP32OPTDEP="mp32opt.o: gnu/mp32opt.gas.sparcv9.S"
    MP32OPTRULE="	\$(CPP) \$(CPPFLAGS) gnu/mp32opt.gas.sparcv9.S | \$(AS) \$(ASFLAGS) -o mp32opt.o"
    ;;
esac
AC_SUBST(BLOWFISHOPTDEP)
AC_SUBST(BLOWFISHOPTRULE)
AC_SUBST(FIPS180OPTDEP)
AC_SUBST(FIPS180OPTRULE)
AC_SUBST(MP32OPTDEP)
AC_SUBST(MP32OPTRULE)

dnl Generate the config header
AC_CONFIG_HEADER(gnu/config.gnu.h)

dnl Output
AC_OUTPUT(Makefile)
